{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]"
        },
        "tenantId": {
            "type": "string",
            "defaultValue": "[subscription().tenantId]"
        },
        "ProjectName": {
            "type": "string"
        },
        "adUserId": {
            "type": "string"
        },
        "StorageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS"
        },
        "StorageKind": {
            "type": "string",
            "defaultValue": "StorageV2"
        },
        "StorageAccessTier": {
            "type": "string",
            "defaultValue": "Cool"
        },
        "StorageMinimumTlsVersion": {
            "type": "string",
            "defaultValue": "TLS1_0"
        },
        "StorageSupportsHttpsTrafficOnly": {
            "type": "bool",
            "defaultValue": true
        },
        "StorageAllowBlobPublicAccess": {
            "type": "bool",
            "defaultValue": true
        },
        "StorageNetworkAclsBypass": {
            "type": "string",
            "defaultValue": "AzureServices"
        },
        "StorageNetworkAclsDefaultAction": {
            "type": "string",
            "defaultValue": "Allow"
        },
        "serverfarms_blob_exercise_plan_name": {
            "defaultValue": "[concat('serverfarm',parameters('WebsiteName'))]",
            "type": "String"
        },
        "WebsiteName": {
            "defaultValue": "geosense",
            "type": "String"
        }
    },
    "variables": {
        "StorageAccountName": "[concat('storage0000',uniquestring(resourceGroup().id))]",
        "keyvaultname": "[concat('keyvault200',uniquestring(resourceGroup().id))]",
        "ServerName": "[concat('server00000',uniquestring(resourceGroup().id))]",
        "DatabaseName": "[concat('database000',uniquestring(resourceGroup().id))]"
    },
    "resources": [
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[variables('keyvaultname')]",
            "location": "[parameters('location')]",
            "properties": {
                "enabledForDeployment": false,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": false,
                "enableSoftDelete": false,
                "softDeleteRetentionInDays": "7",
                "accessPolicies": [
                    {
                        "objectId": "[parameters('adUserId')]",
                        "tenantId": "[parameters('tenantId')]",
                        "permissions": {
                            "keys": [
                                "Get",
                                "List",
                                "Update",
                                "Create",
                                "Import",
                                "Delete",
                                "Recover",
                                "Backup",
                                "Restore"
                            ],
                            "secrets": [
                                "Get",
                                "List",
                                "Set",
                                "Delete",
                                "Recover",
                                "Backup",
                                "Restore"
                            ],
                            "certificates": [
                                "Get",
                                "List",
                                "Update",
                                "Create",
                                "Import",
                                "Delete",
                                "Recover",
                                "Backup",
                                "Restore",
                                "ManageContacts",
                                "ManageIssuers",
                                "GetIssuers",
                                "ListIssuers",
                                "SetIssuers",
                                "DeleteIssuers"
                            ]
                        }
                    }
                ],
                "tenantId": "[parameters('tenantId')]",
                "sku": {
                    "name": "standard",
                    "family": "A"
                }
            },
            "resources": [
                {
                    "type": "secrets",
                    "name": "StorageKey",
                    "apiVersion": "2015-06-01",
                    "tags": { "displayName": "secret" },
                    "properties": {
                        "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
                    },
                    "dependsOn": [
                        "[concat('Microsoft.KeyVault/vaults/', variables('keyvaultname'))]",
                        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountName'))]"
                    ]
                }
            ]
        },
        {
            "name": "[variables('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "location": "[parameters('location')]",
            "properties": {
                "accessTier": "[parameters('StorageAccessTier')]",
                "minimumTlsVersion": "[parameters('StorageMinimumTlsVersion')]",
                "supportsHttpsTrafficOnly": "[parameters('StorageSupportsHttpsTrafficOnly')]",
                "allowBlobPublicAccess": "[parameters('StorageAllowBlobPublicAccess')]",
                "networkAcls": {
                    "bypass": "[parameters('StorageNetworkAclsBypass')]",
                    "defaultAction": "[parameters('StorageNetworkAclsDefaultAction')]",
                    "ipRules": []
                }
            },
            "dependsOn": [],
            "sku": {
                "name": "[parameters('StorageAccountType')]"
            },
            "kind": "[parameters('StorageKind')]",
            "tags": {}
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2018-02-01",
            "name": "[parameters('serverfarms_blob_exercise_plan_name')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "F1",
                "tier": "Free",
                "size": "F1",
                "family": "F",
                "capacity": 0
            },
            "kind": "app",
            "properties": {
                "perSiteScaling": false,
                "maximumElasticWorkerCount": 1,
                "isSpot": false,
                "reserved": false,
                "isXenon": false,
                "hyperV": false,
                "targetWorkerCount": 0,
                "targetWorkerSizeId": 0
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2018-11-01",
            "name": "[parameters('WebsiteName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('serverfarms_blob_exercise_plan_name'))]"
            ],
            "kind": "app",
            "properties": {
                "enabled": true,
                "hostNameSslStates": [
                    {
                        "name": "[concat(parameters('WebsiteName'), '.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Standard"
                    },
                    {
                        "name": "[concat(parameters('WebsiteName'), '.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Repository"
                    }
                ],
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('serverfarms_blob_exercise_plan_name'))]",
                "reserved": false,
                "isXenon": false,
                "hyperV": false,
                "siteConfig": {},
                "scmSiteAlsoStopped": false,
                "clientAffinityEnabled": true,
                "clientCertEnabled": false,
                "hostNamesDisabled": false,
                "containerSize": 0,
                "dailyMemoryTimeQuota": 0,
                "httpsOnly": false,
                "redundancyMode": "None"
            }
        },
        {
            "type": "Microsoft.Web/sites/config",
            "apiVersion": "2018-11-01",
            "name": "[concat(parameters('WebsiteName'), '/web')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('WebsiteName'))]"
            ],
            "properties": {
                "numberOfWorkers": 1,
                "defaultDocuments": [
                    "Default.htm",
                    "Default.html",
                    "Default.asp",
                    "index.htm",
                    "index.html",
                    "iisstart.htm",
                    "default.aspx",
                    "index.php",
                    "hostingstart.html"
                ],
                "netFrameworkVersion": "v4.0",
                "phpVersion": "5.6",
                "requestTracingEnabled": false,
                "remoteDebuggingEnabled": false,
                "remoteDebuggingVersion": "VS2019",
                "httpLoggingEnabled": false,
                "logsDirectorySizeLimit": 35,
                "detailedErrorLoggingEnabled": false,
                "publishingUsername": "[CONCAT('$',parameters('WebsiteName'))]",
                "azureStorageAccounts": {},
                "scmType": "GitHubAction",
                "use32BitWorkerProcess": true,
                "webSocketsEnabled": false,
                "alwaysOn": false,
                "managedPipelineMode": "Integrated",
                "virtualApplications": [
                    {
                        "virtualPath": "/",
                        "physicalPath": "site\\wwwroot",
                        "preloadEnabled": false
                    }
                ],
                "loadBalancing": "LeastRequests",
                "experiments": {
                    "rampUpRules": []
                },
                "autoHealEnabled": false,
                "localMySqlEnabled": false,
                "ipSecurityRestrictions": [
                    {
                        "ipAddress": "Any",
                        "action": "Allow",
                        "priority": 1,
                        "name": "Allow all",
                        "description": "Allow all access"
                    }
                ],
                "scmIpSecurityRestrictions": [
                    {
                        "ipAddress": "Any",
                        "action": "Allow",
                        "priority": 1,
                        "name": "Allow all",
                        "description": "Allow all access"
                    }
                ],
                "scmIpSecurityRestrictionsUseMain": false,
                "http20Enabled": true,
                "minTlsVersion": "1.2",
                "ftpsState": "AllAllowed",
                "reservedInstanceCount": 0
            }
        },
        {
            "type": "Microsoft.Web/sites/hostNameBindings",
            "apiVersion": "2018-11-01",
            "name": "[concat(parameters('WebsiteName'), '/', parameters('WebsiteName'), '.azurewebsites.net')]",
            "location": "West Europe",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('WebsiteName'))]"
            ],
            "properties": {
                "siteName": "[parameters('WebsiteName')]",
                "hostNameType": "Verified"
            }
        },
        {
            "name": "[variables('ServerName')]",
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2019-06-01-preview",
            "location": "[parameters('location')]",
            "tags": {},
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "administratorLogin": "Ard",
                "administratorLoginPassword": "Goossens."
            }
        },
        {
            "name": "[concat(variables('ServerName'), '/', variables('DatabaseName'))]",

            "type": "Microsoft.Sql/servers/databases",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('ServerName'))]"
            ],
            "apiVersion": "2019-06-01-preview",
            "location": "[parameters('location')]",
            "tags": {},
            "sku": {
                "name": "Basic",
                "tier": "Basic"
            }
        }
    ],
    "outputs": {
        "keyVaultId": {
            "type": "string",
            "value": "[resourceId('Microsoft.KeyVault/vaults', variables('keyvaultname'))]"
        },
        "StorageId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
        },
        "StorageAccount": {
            "type": "string",
            "value": "[Concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]"
        },
        "serverfarm": {
            "type": "string",
            "value": "[resourceId('Microsoft.Web/serverfarms', parameters('serverfarms_blob_exercise_plan_name'))]"
        },
        "website": {
            "type": "string",
            "value": "[resourceId('Microsoft.Web/sites', parameters('WebsiteName'))]"
        },
        "SQLServer": {
            "type": "string",
            "value": "[resourceId('Microsoft.Sql/servers', variables('ServerName'))]"
        },
        "Database": {
            "type": "string",
            "value": "[resourceId('Microsoft.Sql/servers/databases', variables('DatabaseName'))]"
        },
        "test2": {
            "type": "string",
            "value": "[subscription().tenantId]"
        }
    }
}